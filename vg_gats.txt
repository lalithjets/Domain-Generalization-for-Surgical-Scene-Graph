model config:
	model_config = model.CONFIG1.save_config()

		model_config = {'graph_head':{}, 'graph_node':{}, 'graph_edge':{}, 'graph_attn':{}}
        CONFIG=self.__dict__
        for k, v in CONFIG.items():
            if 'G_H' in k:
                model_config['graph_head'][k]=v
            elif 'G_N' in k:
                model_config['graph_node'][k]=v
            elif 'G_E' in k:
                model_config['graph_edge'][k]=v
            elif 'G_A' in k:
                model_config['graph_attn'][k]=v
            else:
                model_config[k]=v
        
        return model_config

    model_config['lr'] = args.lr
    model_config['bs'] = args.batch_size
    model_config['layers'] = args.layers
    model_config['multi_attn'] = args.multi_attn
    model_config['data_aug'] = args.data_aug
    model_config['drop_out'] = args.drop_prob
    model_config['optimizer'] = args.optim
    model_config['diff_edge'] = args.diff_edge
    model_config['model_parameters'] = parameter_num
    io.dump_json_object(model_config, os.path.join(args.save_dir, args.exp_ver, 'l1_config.json'))


					fc7						true		false			0.3							false					1						false
model = AGRNN(feat_type=args.feat_type, bias=args.bias, bn=args.bn, dropout=args.drop_prob, multi_attn=args.multi_attn, layer=args.layers, diff_edge=args.diff_edge)
output = model(node_num, features, spatial_feat, word2vec, roi_labels)


# set up graph
        batch_graph = []
        batch_h_node_list = []
        batch_obj_node_list = []
        batch_h_h_e_list = []
        batch_o_o_e_list = []
        batch_h_o_e_list = []
        batch_readout_edge_list = []
        batch_readout_h_h_e_list = []
        batch_readout_h_o_e_list = []
        node_num_cum = np.cumsum(node_num) # !IMPORTANT

        for i in range(len(node_num)):
            node_space = 0
            if i != 0:
                node_space = node_num_cum[i-1]
            
            #self._build_graph(node_num[i], roi_label[i], node_space, diff_edge=self.diff_edge)
            graph, h_node_list, obj_node_list, h_h_e_list, o_o_e_list, h_o_e_list, readout_edge_list, readout_h_h_e_list, readout_h_o_e_list = self._build_graph(node_num[i], roi_label[i], node_space, diff_edge=self.diff_edge)
            
            # updata batch graph,
            batch_graph.append(graph)
            batch_h_node_list += h_node_list
            batch_obj_node_list += obj_node_list
            
            batch_h_h_e_list += h_h_e_list
            batch_o_o_e_list += o_o_e_list
            batch_h_o_e_list += h_o_e_list

            batch_readout_edge_list += readout_edge_list
            batch_readout_h_h_e_list += readout_h_h_e_list
            batch_readout_h_o_e_list += readout_h_o_e_list
        
        batch_graph = dgl.batch(batch_graph)

        # ipdb.set_trace()
        if not self.CONFIG1.feat_type == 'fc7':
            feat = self.graph_head(feat)

        # pass throuh gnn/gcn
        if self.layer==1:
            self.grnn1(batch_graph, batch_h_node_list, batch_obj_node_list, batch_h_h_e_list, batch_o_o_e_list, batch_h_o_e_list, feat, spatial_feat, word2vec, validation, initial_feat=True)
            batch_graph.apply_edges(self.edge_readout, tuple(zip(*(batch_readout_h_o_e_list+batch_readout_h_h_e_list))))
        
        elif self.layer==2:
            feat, feat_lang = self.grnn1(batch_graph, batch_h_node_list, batch_obj_node_list, batch_h_h_e_list, batch_o_o_e_list, batch_h_o_e_list, feat, spatial_feat, word2vec, validation, pop_feat=True, initial_feat=True)
            self.grnn2(batch_graph, batch_h_node_list, batch_obj_node_list, batch_h_h_e_list, batch_o_o_e_list, batch_h_o_e_list, feat, spatial_feat, feat_lang, validation)
            if self.diff_edge:
                # update node feature at the last layer 
                if not len(batch_h_node_list) == 0:
                    batch_graph.apply_nodes(self.h_node_update, batch_h_node_list)
                if not len(batch_obj_node_list) == 0:
                    batch_graph.apply_nodes(self.o_node_update, batch_obj_node_list)
            else:
                batch_graph.apply_nodes(self.h_node_update, batch_h_node_list+batch_obj_node_list)
            batch_graph.apply_edges(self.edge_readout, tuple(zip(*(batch_readout_h_o_e_list+batch_readout_h_h_e_list))))
        
        else:
            feat, feat_lang = self.grnn1(batch_graph, batch_h_node_list, batch_obj_node_list, batch_h_h_e_list, batch_o_o_e_list, batch_h_o_e_list, feat, spatial_feat, word2vec, validation, pop_feat=True, initial_feat=True)
            feat, feat_lang = self.grnn2(batch_graph, batch_h_node_list, batch_obj_node_list, batch_h_h_e_list, batch_o_o_e_list, batch_h_o_e_list, feat, spatial_feat, feat_lang, validation, pop_feat=True)
            self.grnn3(batch_graph, batch_h_node_list, batch_obj_node_list, batch_h_h_e_list, batch_o_o_e_list, batch_h_o_e_list, feat, spatial_feat, feat_lang, validation)
            if self.diff_edge:
                # update node feature at the last layer 
                if not len(batch_h_node_list) == 0:
                    batch_graph.apply_nodes(self.h_node_update, batch_h_node_list)
                if not len(batch_obj_node_list) == 0:
                    batch_graph.apply_nodes(self.o_node_update, batch_obj_node_list)
            else:
                batch_graph.apply_nodes(self.h_node_update, batch_h_node_list+batch_obj_node_list)
            batch_graph.apply_edges(self.edge_readout, tuple(zip(*(batch_readout_h_o_e_list+batch_readout_h_h_e_list))))

        # import ipdb; ipdb.set_trace()
        if self.training or validation:
            # return batch_graph.edges[tuple(zip(*(batch_readout_h_o_e_list+batch_readout_h_h_e_list)))].data['pred']
            # !NOTE: cannot use "batch_readout_h_o_e_list+batch_readout_h_h_e_list" because of the wrong order
            return batch_graph.edges[tuple(zip(*batch_readout_edge_list))].data['pred']
        else:
            return batch_graph.edges[tuple(zip(*batch_readout_edge_list))].data['pred'], \
                   batch_graph.nodes[batch_h_node_list].data['alpha'], \
                   batch_graph.nodes[batch_h_node_list].data['alpha_lang'] 


img_name ['HICO_train2015_00000001.jpg']
det_boxes []
roi_labels size: [1x ] 2
roi_scores []
node_num [2]
edge_labels_size torch.Size([1, 117])
edge_num [1]
features_size torch.Size([2, 1024])
spatial_feat_size torch.Size([2, 16])
word2vec_size torch.Size([2, 300])

img_name ['HICO_train2015_00000002.jpg']
det_boxes []
roi_labels size: [1x ] 28
roi_scores []
node_num [28]
edge_labels_size torch.Size([27, 117])
edge_num [27]
features_size torch.Size([28, 1024])
spatial_feat_size torch.Size([756, 16])
word2vec_size torch.Size([28, 300])

img_name ['HICO_train2015_00000004.jpg']
det_boxes []
roi_labels size: [1x ] 11
roi_scores []
node_num [11]
edge_labels_size torch.Size([49, 117])
edge_num [49]
features_size torch.Size([11, 1024])
spatial_feat_size torch.Size([110, 16])
word2vec_size torch.Size([11, 300])

HICO_train2015_00000001.jpg
    {'global_id': 'HICO_train2015_00000001', 
     'image_path_postfix': 'train2015/HICO_train2015_00000001.jpg', 
     'image_size': [480, 640, 3], 
     'hois': [
        {'id': '153',
         'human_bboxes': [[207, 32, 426, 299]],
         'object_bboxes': [[58, 97, 571, 404]], 
         'connections': [[0, 0]],
         'invis': 0
        },
        {'id': '154',
         'human_bboxes': [[212, 19, 437, 356]],
         'object_bboxes': [[76, 114, 582, 395]], 
         'connections': [[0, 0]], 
         'invis': 0
        }, 
        {'id': '155',
         'human_bboxes': [[205, 32, 426, 305]], 
         'object_bboxes': [[60, 99, 570, 400]], 
         'connections': [[0, 0]], 
         'invis': 0
        }, 
        {'id': '156',
         'human_bboxes': [[208, 25, 443, 316]], 
         'object_bboxes': [[58, 98, 578, 394]], 
         'connections': [[0, 0]], 
         'invis': 0
        }],
     'pos_hoi_ids': ['153', '154', '155', '156'], 
     'neg_hoi_ids': ['148', '149', '150', '151', '152', '157', '158', '159', '160']}

HICO_train2015_00000002.jpg
    {'global_id': 'HICO_train2015_00000002',
     'image_path_postfix': 'train2015/HICO_train2015_00000002.jpg', 
     'image_size': [480, 640, 3], 
     'hois': [
         {'id': '224',
          'human_bboxes': [[261, 0, 637, 137]], 
          'object_bboxes': [[161, 130, 257, 164]], 
          'connections': [[0, 0]], 
          'invis': 0
          }],
     'pos_hoi_ids': ['224'], 
     'neg_hoi_ids': ['215', '216', '217', '218', '219', '220', '221', '222', '223']}

HICO_train2015_00000003.jpg
    {'global_id': 'HICO_train2015_00000003',
     'image_path_postfix': 'train2015/HICO_train2015_00000003.jpg', 
     'image_size': [640, 599, 3], 
     'hois': [
         {'id': '065', 
          'human_bboxes': [[566, 360, 579, 389]], 
          'object_bboxes': [[73, 51, 509, 483]], 
          'connections': [[0, 0]], 
          'invis': 0
         }],
     'pos_hoi_ids': ['065'], 
     'neg_hoi_ids': ['055', '056', '057', '058', '059', '060', '061', '062', '063', '064']}



node_num 2
roi_labels [1 4]
node_space 0
diff_edge False
h_node_list [0]
obj_node_list [1]
edge_list           [ (0, 1), 
                    (1, 0)]
readout_edge_list   [(1, 0)]
src_box_list [1]

node_num 28
roi_labels [ 1 40 40 42 42 42 43 45 45 45 45 46 46 46 46 46 46 52 52 52 52 52 52 52 52 56 57 61]
node_space 0
diff_edge False
h_node_list [0]
obj_node_list [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27]
edge_list           [(0, 1),(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), 
                     (1, 0), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20), (1, 21), (1, 22), (1, 23), (1, 24), (1, 25), (1, 26), (1, 27), 
                     (2, 0), (2, 1), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11), (2, 12), (2, 13), (2, 14), (2, 15), (2, 16), (2, 17), (2, 18), (2, 19), (2, 20), (2, 21), (2, 22), (2, 23), (2, 24), (2, 25), (2, 26), (2, 27), 
                     (3, 0), (3, 1), (3, 2), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (3, 12), (3, 13), (3, 14), (3, 15), (3, 16), (3, 17), (3, 18), (3, 19), (3, 20), (3, 21), (3, 22), (3, 23), (3, 24), (3, 25), (3, 26), (3, 27), 
                     (4, 0), (4, 1), (4, 2), (4, 3), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (4, 14), (4, 15), (4, 16), (4, 17), (4, 18), (4, 19), (4, 20), (4, 21), (4, 22), (4, 23), (4, 24), (4, 25), (4, 26), (4, 27), 
                     (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17), (5, 18), (5, 19), (5, 20), (5, 21), (5, 22), (5, 23), (5, 24), (5, 25), (5, 26), (5, 27), 
                     (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (6, 13), (6, 14), (6, 15), (6, 16), (6, 17), (6, 18), (6, 19), (6, 20), (6, 21), (6, 22), (6, 23), (6, 24), (6, 25), (6, 26), (6, 27), 
                     (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (7, 13), (7, 14), (7, 15), (7, 16), (7, 17), (7, 18), (7, 19), (7, 20), (7, 21), (7, 22), (7, 23), (7, 24), (7, 25), (7, 26), (7, 27), 
                     (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (8, 14), (8, 15), (8, 16), (8, 17), (8, 18), (8, 19), (8, 20), (8, 21), (8, 22), (8, 23), (8, 24), (8, 25), (8, 26), (8, 27), 
                     (9, 0), (9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17), (9, 18), (9, 19), (9, 20), (9, 21), (9, 22), (9, 23), (9, 24), (9, 25), (9, 26), (9, 27), 
                     (10, 0), (10, 1), (10, 2), (10, 3), (10, 4), (10, 5), (10, 6), (10, 7), (10, 8), (10, 9), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (10, 19), (10, 20), (10, 21), (10, 22), (10, 23), (10, 24), (10, 25), (10, 26), (10, 27), 
                     (11, 0), (11, 1), (11, 2), (11, 3), (11, 4), (11, 5), (11, 6), (11, 7), (11, 8), (11, 9), (11, 10), (11, 12), (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (11, 18), (11, 19), (11, 20), (11, 21), (11, 22), (11, 23), (11, 24), (11, 25), (11, 26), (11, 27), 
                     (12, 0), (12, 1), (12, 2), (12, 3), (12, 4), (12, 5), (12, 6), (12, 7), (12, 8), (12, 9), (12, 10), (12, 11), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), (12, 21), (12, 22), (12, 23), (12, 24), (12, 25), (12, 26), (12, 27), 
                     (13, 0), (13, 1), (13, 2), (13, 3), (13, 4), (13, 5), (13, 6), (13, 7), (13, 8), (13, 9), (13, 10), (13, 11), (13, 12), (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), (13, 19), (13, 20), (13, 21), (13, 22), (13, 23), (13, 24), (13, 25), (13, 26), (13, 27), 
                     (14, 0), (14, 1), (14, 2), (14, 3), (14, 4), (14, 5), (14, 6), (14, 7), (14, 8), (14, 9), (14, 10), (14, 11), (14, 12), (14, 13), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 20), (14, 21), (14, 22), (14, 23), (14, 24), (14, 25), (14, 26), (14, 27), 
                     (15, 0), (15, 1), (15, 2), (15, 3), (15, 4), (15, 5), (15, 6), (15, 7), (15, 8), (15, 9), (15, 10), (15, 11), (15, 12), (15, 13), (15, 14), (15, 16), (15, 17), (15, 18), (15, 19), (15, 20), (15, 21), (15, 22), (15, 23), (15, 24), (15, 25), (15, 26), (15, 27), 
                     (16, 0), (16, 1), (16, 2), (16, 3), (16, 4), (16, 5), (16, 6), (16, 7), (16, 8), (16, 9), (16, 10), (16, 11), (16, 12), (16, 13), (16, 14), (16, 15), (16, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 22), (16, 23), (16, 24), (16, 25), (16, 26), (16, 27), 
                     (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7), (17, 8), (17, 9), (17, 10), (17, 11), (17, 12), (17, 13), (17, 14), (17, 15), (17, 16), (17, 18), (17, 19), (17, 20), (17, 21), (17, 22), (17, 23), (17, 24), (17, 25), (17, 26), (17, 27), 
                     (18, 0), (18, 1), (18, 2), (18, 3), (18, 4), (18, 5), (18, 6), (18, 7), (18, 8), (18, 9), (18, 10), (18, 11), (18, 12), (18, 13), (18, 14), (18, 15), (18, 16), (18, 17), (18, 19), (18, 20), (18, 21), (18, 22), (18, 23), (18, 24), (18, 25), (18, 26), (18, 27), 
                     (19, 0), (19, 1), (19, 2), (19, 3), (19, 4), (19, 5), (19, 6), (19, 7), (19, 8), (19, 9), (19, 10), (19, 11), (19, 12), (19, 13), (19, 14), (19, 15), (19, 16), (19, 17), (19, 18), (19, 20), (19, 21), (19, 22), (19, 23), (19, 24), (19, 25), (19, 26), (19, 27), 
                     (20, 0), (20, 1), (20, 2), (20, 3), (20, 4), (20, 5), (20, 6), (20, 7), (20, 8), (20, 9), (20, 10), (20, 11), (20, 12), (20, 13), (20, 14), (20, 15), (20, 16), (20, 17), (20, 18), (20, 19), (20, 21), (20, 22), (20, 23), (20, 24), (20, 25), (20, 26), (20, 27), 
                     (21, 0), (21, 1), (21, 2), (21, 3), (21, 4), (21, 5), (21, 6), (21, 7), (21, 8), (21, 9), (21, 10), (21, 11), (21, 12), (21, 13), (21, 14), (21, 15), (21, 16), (21, 17), (21, 18), (21, 19), (21, 20), (21, 22), (21, 23), (21, 24), (21, 25), (21, 26), (21, 27), 
                     (22, 0), (22, 1), (22, 2), (22, 3), (22, 4), (22, 5), (22, 6), (22, 7), (22, 8), (22, 9), (22, 10), (22, 11), (22, 12), (22, 13), (22, 14), (22, 15), (22, 16), (22, 17), (22, 18), (22, 19), (22, 20), (22, 21), (22, 23), (22, 24), (22, 25), (22, 26), (22, 27), 
                     (23, 0), (23, 1), (23, 2), (23, 3), (23, 4), (23, 5), (23, 6), (23, 7), (23, 8), (23, 9), (23, 10), (23, 11), (23, 12), (23, 13), (23, 14), (23, 15), (23, 16), (23, 17), (23, 18), (23, 19), (23, 20), (23, 21), (23, 22), (23, 24), (23, 25), (23, 26),(23, 27), 
                     (24, 0), (24, 1), (24, 2), (24, 3), (24, 4), (24, 5), (24, 6), (24, 7), (24, 8), (24, 9), (24, 10), (24, 11), (24, 12), (24, 13), (24, 14), (24, 15), (24, 16), (24, 17), (24, 18), (24, 19), (24, 20), (24, 21), (24, 22), (24, 23), (24, 25), (24, 26), (24, 27), 
                     (25, 0), (25, 1), (25, 2), (25, 3), (25, 4), (25, 5), (25, 6), (25, 7), (25, 8), (25, 9), (25, 10), (25, 11), (25, 12), (25, 13), (25, 14), (25, 15), (25, 16), (25, 17), (25, 18), (25, 19), (25, 20), (25, 21), (25, 22), (25, 23), (25, 24), (25, 26), (25, 27), 
                     (26, 0), (26, 1), (26, 2), (26, 3), (26, 4), (26, 5), (26, 6), (26, 7), (26, 8), (26, 9), (26, 10), (26, 11), (26, 12), (26, 13), (26, 14), (26, 15), (26, 16), (26, 17), (26, 18), (26, 19), (26, 20), (26, 21), (26, 22), (26, 23), (26, 24), (26, 25), (26, 27), 
                     (27, 0), (27, 1), (27, 2), (27, 3), (27, 4), (27, 5), (27, 6), (27, 7), (27, 8), (27, 9), (27, 10), (27, 11), (27, 12), (27, 13), (27, 14), (27, 15), (27, 16), (27, 17), (27, 18), (27, 19), (27, 20), (27, 21), (27, 22), (27, 23), (27, 24), (27, 25), (27, 26)]

readout_edge_list   [(1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), 
                     (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), 
                     (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), 
                     (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), 
                     (25, 0), (26, 0), (27, 0)]

src_box_list [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27]

node_num 6
roi_labels [ 1 31 31 31 31 32]
node_space 0
diff_edge False
h_node_list [0]
obj_node_list [1 2 3 4 5]
edge_list           [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5),
                     (1, 0), (1, 2), (1, 3), (1, 4), (1, 5), 
                     (2, 0), (2, 1), (2, 3), (2, 4), (2, 5), 
                     (3, 0), (3, 1), (3, 2), (3, 4), (3, 5), 
                     (4, 0), (4, 1), (4, 2), (4, 3), (4, 5), 
                     (5, 0), (5, 1), (5, 2), (5, 3), (5, 4)]
readout_edge_list   [(1, 0), 
                     (2, 0), 
                     (3, 0), 
                     (4, 0), 
                     (5, 0)]
src_box_list [1 2 3 4 5]

node_num 9
roi_labels [ 1 14 14 14 49 53 61 61 61]
node_space 0
diff_edge False
h_node_list [0]
obj_node_list [1 2 3 4 5 6 7 8]
edge_list           [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8),
                     (1, 0), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), 
                     (2, 0), (2, 1), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), 
                     (3, 0), (3, 1), (3, 2), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), 
                     (4, 0), (4, 1), (4, 2), (4, 3), (4, 5), (4, 6), (4, 7), (4, 8), 
                     (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 6), (5, 7), (5, 8), 
                     (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 7), (6, 8), 
                     (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 8), 
                     (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)]
readout_edge_list   [(1, 0), 
                     (2, 0), 
                     (3, 0), 
                     (4, 0), 
                     (5, 0), 
                     (6, 0), 
                     (7, 0), 
                     (8, 0)]
src_box_list [1 2 3 4 5 6 7 8]
